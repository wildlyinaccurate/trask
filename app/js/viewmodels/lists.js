// Generated by CoffeeScript 1.3.3
(function() {
  var ListViewModel;

  ListViewModel = function(model) {
    var _this = this;
    this.newTaskTitle = ko.observable('');
    this.title = kb.observable(model, {
      key: 'title',
      write: (function(title) {
        if ($.trim(title)) {
          model.save({
            title: $.trim(title)
          });
        } else {
          _.defer(function() {
            return model.destroy();
          });
        }
        return _this.editing(false);
      })
    }, this);
    this.tasks = kb.collectionObservable(model.get('tasks'));
    this.createTask = function(view_model, event) {
      var newTask;
      if (!$.trim(_this.newTaskTitle()) || event.keyCode !== Trask.Keyboard.ENTER) {
        return;
      }
      newTask = _this.tasks.collection().create({
        title: $.trim(_this.newTaskTitle()),
        belongsTo: model.get('id')
      });
      model.get('tasks').add(newTask);
      Backbone.sync('update', model);
      return _this.newTaskTitle('');
    };
    this.slug = ko.computed(function() {
      return _this.title().toLowerCase().replace(/\ /g, '-').replace(/[^\w-]+/g, '');
    });
    return this;
  };

  window.ListsViewModel = function(lists) {
    var _this = this;
    this.title = ko.observable('');
    this.lists = kb.collectionObservable(lists, {
      view_model: ListViewModel
    });
    this.lists.collection().bind('change', function() {
      return _this.lists.valueHasMutated();
    });
    this.createList = function(view_model, event) {
      if (!$.trim(_this.title()) || (event.keyCode !== Trask.Keyboard.ENTER)) {
        return true;
      }
      lists.create({
        title: $.trim(_this.title()),
        tasks: new TaskCollection()
      });
      return _this.title('');
    };
    return this;
  };

}).call(this);
